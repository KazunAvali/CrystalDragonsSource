using Terraria;
using Terraria.ModLoader;
using Microsoft.Xna.Framework;
using static Terraria.ModLoader.ModContent;
using CrystalDragons.Content.Dusts;

namespace CrystalDragons.Content.Buffs
{
    public class EmeraldExploit : ModBuff
    {
        int miscCounter = 0;

        public override void SetDefaults()
        {
            DisplayName.SetDefault("Emerald Exploit");
            Description.SetDefault("Reduced armor and damage reduction");
            Main.buffNoTimeDisplay[Type] = false;
            Main.debuff[Type] = true;
            canBeCleared = true;
        }

        public override void Update(Player player, ref int buffIndex)
        {
            player.statDefense -= 30;
            player.endurance -= 0.2f;

            miscCounter++;
            if (miscCounter >= 300)
            {
                miscCounter = 0;
            }


            Vector2 center = player.Center;
            float num8 = (float)miscCounter / 40f;
            float num7 = 1.0471975512f * 2;

            int dustID = 196;

            int rng = Main.rand.Next(5);

            if (rng == 0)
            {
                dustID = 196;
            }
            else if (rng == 1)
            {
                dustID = 4;
            }
            else if (rng == 2)
            {
                dustID = 111;
            }
            else if (rng == 3)
            {
                dustID = 74;
            }
            else
            {
                dustID = 74;
            }

            int distance = 0;
            if (player.width > player.height)
            {
                distance = player.width;
            }
            else
            {
                distance = player.height;
            }

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    int num6 = Dust.NewDust(center, 0, 0, dustID, 0f, 0f, 100, default(Color), 1f);
                    Main.dust[num6].noGravity = true;
                    Main.dust[num6].velocity = Vector2.Zero;
                    Main.dust[num6].noLight = false;
                    Main.dust[num6].position = center + (num8 * 6.28318548f + num7 * (float)i).ToRotationVector2() * distance;
                }
            }
        }

        public override void Update(NPC npc, ref int buffIndex)
        {
            npc.defense -= 30;

            miscCounter++;
            if (miscCounter >= 300)
            {
                miscCounter = 0;
            }

            Vector2 center = npc.Center;
            float num8 = (float)miscCounter / 40f;
            float num7 = 1.0471975512f * 2;

            //Randomizing dust ID
            int dustID = 196;
            int rng = Main.rand.Next(5);

            if (rng == 0)
            {
                dustID = 196;
            }
            else if (rng == 1)
            {
                dustID = 107;
            }
            else if (rng == 2)
            {
                dustID = 107;
            }
            else if (rng == 3)
            {
                dustID = 74;
            }
            else
            {
                dustID = 74;
            }

            //Make the distance based on whatever the highest value is: width or height, so it encircles the entire NPC.
            int distance = 0;
            if (npc.width > npc.height)
            {
                distance = npc.width;
            }
            else
            {
                distance = npc.height;
            }

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 8; j++)
                {


                    int num6 = Dust.NewDust(center, 0, 0, dustID, 0f, 0f, 100, default(Color), 1f);
                    Main.dust[num6].noGravity = true;
                    Main.dust[num6].velocity = Vector2.Zero;
                    Main.dust[num6].noLight = false;
                    Main.dust[num6].position = center + (num8 * 6.28318548f + num7 * (float)i).ToRotationVector2() * (distance - 4);
                }
            }
        }
    }
}
